<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.neal.myblog.mapper.ArticleMapper">
    <resultMap id="articleVo" type="com.neal.myblog.entity.TArticleVO">
        <!--文章-->
        <collection column="t_article" property="tArticleEX" javaType="com.neal.myblog.entity.TArticleEX">
            <id column="article_id" jdbcType="INTEGER" property="articleId"/>
            <result column="article_title" jdbcType="VARCHAR" property="articleTitle"/>
            <result column="article_time" jdbcType="TIMESTAMP" property="articleTime"/>
            <result column="article_content" jdbcType="VARCHAR" property="articleContent"/>
            <result column="article_tag" jdbcType="VARCHAR" property="articleTag"/>
            <result column="category_id" jdbcType="INTEGER" property="categoryId"/>
        </collection>
        <!--类别-->
        <collection property="tCategory" column="t_category" javaType="com.neal.myblog.entity.TCategory">
            <id column="category_id" jdbcType="INTEGER" property="categoryId"/>
            <result column="category_name" jdbcType="VARCHAR" property="categoryName"/>
        </collection>
        <!--其他-->
        <collection property="other" javaType="com.neal.myblog.entity.Other">
            <result column="view_num" jdbcType="VARCHAR" property="viewNum"/>
            <result column="like_num" jdbcType="VARCHAR" property="likeNum"/>
            <result column="article_num" jdbcType="VARCHAR" property="articleNum"/>
        </collection>
    </resultMap>
    <!--插入文章-->
    <insert id="saveArticle" parameterType="com.neal.myblog.entity.TArticleEX">
        INSERT INTO t_article (article_title, article_time, article_content, article_tag, category_id)
        VALUES (#{articleTitle}, #{articleTime}, #{articleContent}, #{articleTag}, #{categoryId});
    </insert>
    <!--文章更新-->
    <update id="updateArticle" parameterType="com.neal.myblog.entity.TArticleEX">
        UPDATE t_article a
        SET a.article_title   = #{articleTitle},
            a.article_time    = #{articleTime},
            a.article_content = #{articleContent},
            a.article_tag     = #{articleTag},
            a.category_id     = #{categoryId}
        WHERE
            a.article_id = #{articleId}
    </update>
    <!--文章硬删除-->
    <delete id="deleteArticle" parameterType="long">
        DELETE FROM t_article
        WHERE article_id = #{articleId}
    </delete>
    <!--根据ID查找文章，用于更新页面-->
    <select id="getArticleById" resultMap="articleVo" parameterType="long">
        SELECT
            a.article_id,
            a.article_title,
            a.article_time,
            a.article_content,
            a.article_tag,
            c.category_name
        FROM
            t_article a,
            t_category c
        WHERE
            a.category_id = c.category_id AND a.article_id = #{articleId}
    </select>
    <!--分页查询文章-->
    <select id="listArticleByManagerToPage" resultMap="articleVo" parameterType="int">
        SELECT
            t_article.article_id,
            t_article.article_title,
            t_article.article_time,
            t_article.article_tag,
            t_category.category_name,
            (SELECT count(view_id)
             FROM
                 t_view
             WHERE
                 t_view.article_id = t_article.article_id
            ) AS view_num,
            (SELECT count(like_id)
             FROM
                 t_like
             WHERE
                 t_like.article_id = t_article.article_id
            ) AS like_num
        FROM
            t_article
            INNER JOIN
            t_category ON (t_category.category_id = t_article.category_id)
        ORDER BY
            article_time DESC
        LIMIT #{currentPage}, 10
    </select>
    <!--查询出来的数据，用于更新与发布文章时，添加的搜索索引-->
    <select id="getArticleBySearch" resultMap="articleVo" parameterType="long">
        SELECT
            a.article_id,
            a.article_title,
            a.article_time,
            a.article_content,
            a.article_tag,
            c.category_name
        FROM
            t_article a INNER JOIN
            t_category c ON (a.category_id = c.category_id)
        WHERE
            a.category_id = #{articleId}
    </select>
</mapper>